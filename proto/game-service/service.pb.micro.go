// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service.proto

package v1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GameService service

func NewGameServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GameService service

type GameService interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error)
	CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...client.CallOption) (*CreateAuthTokenResponse, error)
	ValidateAuthToken(ctx context.Context, in *ValidateAuthTokenRequest, opts ...client.CallOption) (*ValidateAuthTokenResponse, error)
	RequestGameBalance(ctx context.Context, in *RequestGameBalanceRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	GetServerList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*ServerListResponse, error)
	GetUserServers(ctx context.Context, in *GetUserServersRequest, opts ...client.CallOption) (*ServerListResponse, error)
	TransferTokenFromGame(ctx context.Context, in *TransferTokenFromGameRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	// ChangeCraftLicense is test method, don't use them in api
	ChangeCraftLicense(ctx context.Context, in *ChangeCraftLicenseRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	GetCraftLicense(ctx context.Context, in *GetCraftLicenseRequest, opts ...client.CallOption) (*CraftLicenseProfile, error)
	GetUserCraftList(ctx context.Context, in *GetUserCraftListRequest, opts ...client.CallOption) (*CraftListResponse, error)
	AddCraftService(ctx context.Context, in *AddCraftServiceRequest, opts ...client.CallOption) (*AddCraftServiceResponse, error)
	GetUserCraftService(ctx context.Context, in *GetUserCraftServiceRequest, opts ...client.CallOption) (*CraftListResponse, error)
	RevokeUserCraftService(ctx context.Context, in *RevokeUserCraftServiceRequest, opts ...client.CallOption) (*emptypb.Empty, error)
	GetBestPrices(ctx context.Context, in *GetBestPricesRequest, opts ...client.CallOption) (*GetBestPricesResponse, error)
}

type gameService struct {
	c    client.Client
	name string
}

func NewGameService(name string, c client.Client) GameService {
	return &gameService{
		c:    c,
		name: name,
	}
}

func (c *gameService) Ping(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "GameService.Ping", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...client.CallOption) (*CreateAuthTokenResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.CreateAuthToken", in)
	out := new(CreateAuthTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) ValidateAuthToken(ctx context.Context, in *ValidateAuthTokenRequest, opts ...client.CallOption) (*ValidateAuthTokenResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.ValidateAuthToken", in)
	out := new(ValidateAuthTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) RequestGameBalance(ctx context.Context, in *RequestGameBalanceRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "GameService.RequestGameBalance", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) GetServerList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*ServerListResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.GetServerList", in)
	out := new(ServerListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) GetUserServers(ctx context.Context, in *GetUserServersRequest, opts ...client.CallOption) (*ServerListResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.GetUserServers", in)
	out := new(ServerListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) TransferTokenFromGame(ctx context.Context, in *TransferTokenFromGameRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "GameService.TransferTokenFromGame", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) ChangeCraftLicense(ctx context.Context, in *ChangeCraftLicenseRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "GameService.ChangeCraftLicense", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) GetCraftLicense(ctx context.Context, in *GetCraftLicenseRequest, opts ...client.CallOption) (*CraftLicenseProfile, error) {
	req := c.c.NewRequest(c.name, "GameService.GetCraftLicense", in)
	out := new(CraftLicenseProfile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) GetUserCraftList(ctx context.Context, in *GetUserCraftListRequest, opts ...client.CallOption) (*CraftListResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.GetUserCraftList", in)
	out := new(CraftListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) AddCraftService(ctx context.Context, in *AddCraftServiceRequest, opts ...client.CallOption) (*AddCraftServiceResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.AddCraftService", in)
	out := new(AddCraftServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) GetUserCraftService(ctx context.Context, in *GetUserCraftServiceRequest, opts ...client.CallOption) (*CraftListResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.GetUserCraftService", in)
	out := new(CraftListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) RevokeUserCraftService(ctx context.Context, in *RevokeUserCraftServiceRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "GameService.RevokeUserCraftService", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) GetBestPrices(ctx context.Context, in *GetBestPricesRequest, opts ...client.CallOption) (*GetBestPricesResponse, error) {
	req := c.c.NewRequest(c.name, "GameService.GetBestPrices", in)
	out := new(GetBestPricesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameService service

type GameServiceHandler interface {
	Ping(context.Context, *emptypb.Empty, *emptypb.Empty) error
	CreateAuthToken(context.Context, *CreateAuthTokenRequest, *CreateAuthTokenResponse) error
	ValidateAuthToken(context.Context, *ValidateAuthTokenRequest, *ValidateAuthTokenResponse) error
	RequestGameBalance(context.Context, *RequestGameBalanceRequest, *emptypb.Empty) error
	GetServerList(context.Context, *emptypb.Empty, *ServerListResponse) error
	GetUserServers(context.Context, *GetUserServersRequest, *ServerListResponse) error
	TransferTokenFromGame(context.Context, *TransferTokenFromGameRequest, *emptypb.Empty) error
	// ChangeCraftLicense is test method, don't use them in api
	ChangeCraftLicense(context.Context, *ChangeCraftLicenseRequest, *emptypb.Empty) error
	GetCraftLicense(context.Context, *GetCraftLicenseRequest, *CraftLicenseProfile) error
	GetUserCraftList(context.Context, *GetUserCraftListRequest, *CraftListResponse) error
	AddCraftService(context.Context, *AddCraftServiceRequest, *AddCraftServiceResponse) error
	GetUserCraftService(context.Context, *GetUserCraftServiceRequest, *CraftListResponse) error
	RevokeUserCraftService(context.Context, *RevokeUserCraftServiceRequest, *emptypb.Empty) error
	GetBestPrices(context.Context, *GetBestPricesRequest, *GetBestPricesResponse) error
}

func RegisterGameServiceHandler(s server.Server, hdlr GameServiceHandler, opts ...server.HandlerOption) error {
	type gameService interface {
		Ping(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error
		CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, out *CreateAuthTokenResponse) error
		ValidateAuthToken(ctx context.Context, in *ValidateAuthTokenRequest, out *ValidateAuthTokenResponse) error
		RequestGameBalance(ctx context.Context, in *RequestGameBalanceRequest, out *emptypb.Empty) error
		GetServerList(ctx context.Context, in *emptypb.Empty, out *ServerListResponse) error
		GetUserServers(ctx context.Context, in *GetUserServersRequest, out *ServerListResponse) error
		TransferTokenFromGame(ctx context.Context, in *TransferTokenFromGameRequest, out *emptypb.Empty) error
		ChangeCraftLicense(ctx context.Context, in *ChangeCraftLicenseRequest, out *emptypb.Empty) error
		GetCraftLicense(ctx context.Context, in *GetCraftLicenseRequest, out *CraftLicenseProfile) error
		GetUserCraftList(ctx context.Context, in *GetUserCraftListRequest, out *CraftListResponse) error
		AddCraftService(ctx context.Context, in *AddCraftServiceRequest, out *AddCraftServiceResponse) error
		GetUserCraftService(ctx context.Context, in *GetUserCraftServiceRequest, out *CraftListResponse) error
		RevokeUserCraftService(ctx context.Context, in *RevokeUserCraftServiceRequest, out *emptypb.Empty) error
		GetBestPrices(ctx context.Context, in *GetBestPricesRequest, out *GetBestPricesResponse) error
	}
	type GameService struct {
		gameService
	}
	h := &gameServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GameService{h}, opts...))
}

type gameServiceHandler struct {
	GameServiceHandler
}

func (h *gameServiceHandler) Ping(ctx context.Context, in *emptypb.Empty, out *emptypb.Empty) error {
	return h.GameServiceHandler.Ping(ctx, in, out)
}

func (h *gameServiceHandler) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, out *CreateAuthTokenResponse) error {
	return h.GameServiceHandler.CreateAuthToken(ctx, in, out)
}

func (h *gameServiceHandler) ValidateAuthToken(ctx context.Context, in *ValidateAuthTokenRequest, out *ValidateAuthTokenResponse) error {
	return h.GameServiceHandler.ValidateAuthToken(ctx, in, out)
}

func (h *gameServiceHandler) RequestGameBalance(ctx context.Context, in *RequestGameBalanceRequest, out *emptypb.Empty) error {
	return h.GameServiceHandler.RequestGameBalance(ctx, in, out)
}

func (h *gameServiceHandler) GetServerList(ctx context.Context, in *emptypb.Empty, out *ServerListResponse) error {
	return h.GameServiceHandler.GetServerList(ctx, in, out)
}

func (h *gameServiceHandler) GetUserServers(ctx context.Context, in *GetUserServersRequest, out *ServerListResponse) error {
	return h.GameServiceHandler.GetUserServers(ctx, in, out)
}

func (h *gameServiceHandler) TransferTokenFromGame(ctx context.Context, in *TransferTokenFromGameRequest, out *emptypb.Empty) error {
	return h.GameServiceHandler.TransferTokenFromGame(ctx, in, out)
}

func (h *gameServiceHandler) ChangeCraftLicense(ctx context.Context, in *ChangeCraftLicenseRequest, out *emptypb.Empty) error {
	return h.GameServiceHandler.ChangeCraftLicense(ctx, in, out)
}

func (h *gameServiceHandler) GetCraftLicense(ctx context.Context, in *GetCraftLicenseRequest, out *CraftLicenseProfile) error {
	return h.GameServiceHandler.GetCraftLicense(ctx, in, out)
}

func (h *gameServiceHandler) GetUserCraftList(ctx context.Context, in *GetUserCraftListRequest, out *CraftListResponse) error {
	return h.GameServiceHandler.GetUserCraftList(ctx, in, out)
}

func (h *gameServiceHandler) AddCraftService(ctx context.Context, in *AddCraftServiceRequest, out *AddCraftServiceResponse) error {
	return h.GameServiceHandler.AddCraftService(ctx, in, out)
}

func (h *gameServiceHandler) GetUserCraftService(ctx context.Context, in *GetUserCraftServiceRequest, out *CraftListResponse) error {
	return h.GameServiceHandler.GetUserCraftService(ctx, in, out)
}

func (h *gameServiceHandler) RevokeUserCraftService(ctx context.Context, in *RevokeUserCraftServiceRequest, out *emptypb.Empty) error {
	return h.GameServiceHandler.RevokeUserCraftService(ctx, in, out)
}

func (h *gameServiceHandler) GetBestPrices(ctx context.Context, in *GetBestPricesRequest, out *GetBestPricesResponse) error {
	return h.GameServiceHandler.GetBestPrices(ctx, in, out)
}
