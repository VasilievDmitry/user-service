// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user_service.proto

package pkg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	CreateUserByWallet(ctx context.Context, in *CreateUserByWalletRequest, opts ...client.CallOption) (*UserProfile, error)
	VerifyUserPassword(ctx context.Context, in *VerifyUserPasswordRequest, opts ...client.CallOption) (*UserProfile, error)
	CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...client.CallOption) (*AuthToken, error)
	DeactivateAuthToken(ctx context.Context, in *DeactivateAuthTokenRequest, opts ...client.CallOption) (*empty.Empty, error)
	RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...client.CallOption) (*AuthToken, error)
	SetUsername(ctx context.Context, in *SetUsernameRequest, opts ...client.CallOption) (*empty.Empty, error)
	SetLogin(ctx context.Context, in *SetLoginRequest, opts ...client.CallOption) (*empty.Empty, error)
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...client.CallOption) (*empty.Empty, error)
	GetEmailConfirmationCode(ctx context.Context, in *UserProfile, opts ...client.CallOption) (*GetEmailConfirmationCodeResponse, error)
	ConfirmLogin(ctx context.Context, in *ConfirmLoginRequest, opts ...client.CallOption) (*empty.Empty, error)
	CreatePasswordRecoveryCode(ctx context.Context, in *UserProfile, opts ...client.CallOption) (*empty.Empty, error)
	VerifyPasswordRecoveryCode(ctx context.Context, in *VerifyPasswordRecoveryCodeRequest, opts ...client.CallOption) (*empty.Empty, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...client.CallOption) (*UserProfile, error)
	GetUserByLogin(ctx context.Context, in *GetUserByLoginRequest, opts ...client.CallOption) (*UserProfile, error)
	GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, opts ...client.CallOption) (*UserProfile, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user.service"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUserByWallet(ctx context.Context, in *CreateUserByWalletRequest, opts ...client.CallOption) (*UserProfile, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUserByWallet", in)
	out := new(UserProfile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyUserPassword(ctx context.Context, in *VerifyUserPasswordRequest, opts ...client.CallOption) (*UserProfile, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyUserPassword", in)
	out := new(UserProfile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, opts ...client.CallOption) (*AuthToken, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateAuthToken", in)
	out := new(AuthToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeactivateAuthToken(ctx context.Context, in *DeactivateAuthTokenRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.DeactivateAuthToken", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, opts ...client.CallOption) (*AuthToken, error) {
	req := c.c.NewRequest(c.name, "UserService.RefreshAccessToken", in)
	out := new(AuthToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SetUsername(ctx context.Context, in *SetUsernameRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.SetUsername", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SetLogin(ctx context.Context, in *SetLoginRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.SetLogin", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.SetPassword", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetEmailConfirmationCode(ctx context.Context, in *UserProfile, opts ...client.CallOption) (*GetEmailConfirmationCodeResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetEmailConfirmationCode", in)
	out := new(GetEmailConfirmationCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ConfirmLogin(ctx context.Context, in *ConfirmLoginRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.ConfirmLogin", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreatePasswordRecoveryCode(ctx context.Context, in *UserProfile, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.CreatePasswordRecoveryCode", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyPasswordRecoveryCode(ctx context.Context, in *VerifyPasswordRecoveryCodeRequest, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyPasswordRecoveryCode", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...client.CallOption) (*UserProfile, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserById", in)
	out := new(UserProfile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserByLogin(ctx context.Context, in *GetUserByLoginRequest, opts ...client.CallOption) (*UserProfile, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserByLogin", in)
	out := new(UserProfile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, opts ...client.CallOption) (*UserProfile, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserByAccessToken", in)
	out := new(UserProfile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	CreateUserByWallet(context.Context, *CreateUserByWalletRequest, *UserProfile) error
	VerifyUserPassword(context.Context, *VerifyUserPasswordRequest, *UserProfile) error
	CreateAuthToken(context.Context, *CreateAuthTokenRequest, *AuthToken) error
	DeactivateAuthToken(context.Context, *DeactivateAuthTokenRequest, *empty.Empty) error
	RefreshAccessToken(context.Context, *RefreshAccessTokenRequest, *AuthToken) error
	SetUsername(context.Context, *SetUsernameRequest, *empty.Empty) error
	SetLogin(context.Context, *SetLoginRequest, *empty.Empty) error
	SetPassword(context.Context, *SetPasswordRequest, *empty.Empty) error
	GetEmailConfirmationCode(context.Context, *UserProfile, *GetEmailConfirmationCodeResponse) error
	ConfirmLogin(context.Context, *ConfirmLoginRequest, *empty.Empty) error
	CreatePasswordRecoveryCode(context.Context, *UserProfile, *empty.Empty) error
	VerifyPasswordRecoveryCode(context.Context, *VerifyPasswordRecoveryCodeRequest, *empty.Empty) error
	GetUserById(context.Context, *GetUserByIdRequest, *UserProfile) error
	GetUserByLogin(context.Context, *GetUserByLoginRequest, *UserProfile) error
	GetUserByAccessToken(context.Context, *GetUserByAccessTokenRequest, *UserProfile) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		CreateUserByWallet(ctx context.Context, in *CreateUserByWalletRequest, out *UserProfile) error
		VerifyUserPassword(ctx context.Context, in *VerifyUserPasswordRequest, out *UserProfile) error
		CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, out *AuthToken) error
		DeactivateAuthToken(ctx context.Context, in *DeactivateAuthTokenRequest, out *empty.Empty) error
		RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, out *AuthToken) error
		SetUsername(ctx context.Context, in *SetUsernameRequest, out *empty.Empty) error
		SetLogin(ctx context.Context, in *SetLoginRequest, out *empty.Empty) error
		SetPassword(ctx context.Context, in *SetPasswordRequest, out *empty.Empty) error
		GetEmailConfirmationCode(ctx context.Context, in *UserProfile, out *GetEmailConfirmationCodeResponse) error
		ConfirmLogin(ctx context.Context, in *ConfirmLoginRequest, out *empty.Empty) error
		CreatePasswordRecoveryCode(ctx context.Context, in *UserProfile, out *empty.Empty) error
		VerifyPasswordRecoveryCode(ctx context.Context, in *VerifyPasswordRecoveryCodeRequest, out *empty.Empty) error
		GetUserById(ctx context.Context, in *GetUserByIdRequest, out *UserProfile) error
		GetUserByLogin(ctx context.Context, in *GetUserByLoginRequest, out *UserProfile) error
		GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, out *UserProfile) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) CreateUserByWallet(ctx context.Context, in *CreateUserByWalletRequest, out *UserProfile) error {
	return h.UserServiceHandler.CreateUserByWallet(ctx, in, out)
}

func (h *userServiceHandler) VerifyUserPassword(ctx context.Context, in *VerifyUserPasswordRequest, out *UserProfile) error {
	return h.UserServiceHandler.VerifyUserPassword(ctx, in, out)
}

func (h *userServiceHandler) CreateAuthToken(ctx context.Context, in *CreateAuthTokenRequest, out *AuthToken) error {
	return h.UserServiceHandler.CreateAuthToken(ctx, in, out)
}

func (h *userServiceHandler) DeactivateAuthToken(ctx context.Context, in *DeactivateAuthTokenRequest, out *empty.Empty) error {
	return h.UserServiceHandler.DeactivateAuthToken(ctx, in, out)
}

func (h *userServiceHandler) RefreshAccessToken(ctx context.Context, in *RefreshAccessTokenRequest, out *AuthToken) error {
	return h.UserServiceHandler.RefreshAccessToken(ctx, in, out)
}

func (h *userServiceHandler) SetUsername(ctx context.Context, in *SetUsernameRequest, out *empty.Empty) error {
	return h.UserServiceHandler.SetUsername(ctx, in, out)
}

func (h *userServiceHandler) SetLogin(ctx context.Context, in *SetLoginRequest, out *empty.Empty) error {
	return h.UserServiceHandler.SetLogin(ctx, in, out)
}

func (h *userServiceHandler) SetPassword(ctx context.Context, in *SetPasswordRequest, out *empty.Empty) error {
	return h.UserServiceHandler.SetPassword(ctx, in, out)
}

func (h *userServiceHandler) GetEmailConfirmationCode(ctx context.Context, in *UserProfile, out *GetEmailConfirmationCodeResponse) error {
	return h.UserServiceHandler.GetEmailConfirmationCode(ctx, in, out)
}

func (h *userServiceHandler) ConfirmLogin(ctx context.Context, in *ConfirmLoginRequest, out *empty.Empty) error {
	return h.UserServiceHandler.ConfirmLogin(ctx, in, out)
}

func (h *userServiceHandler) CreatePasswordRecoveryCode(ctx context.Context, in *UserProfile, out *empty.Empty) error {
	return h.UserServiceHandler.CreatePasswordRecoveryCode(ctx, in, out)
}

func (h *userServiceHandler) VerifyPasswordRecoveryCode(ctx context.Context, in *VerifyPasswordRecoveryCodeRequest, out *empty.Empty) error {
	return h.UserServiceHandler.VerifyPasswordRecoveryCode(ctx, in, out)
}

func (h *userServiceHandler) GetUserById(ctx context.Context, in *GetUserByIdRequest, out *UserProfile) error {
	return h.UserServiceHandler.GetUserById(ctx, in, out)
}

func (h *userServiceHandler) GetUserByLogin(ctx context.Context, in *GetUserByLoginRequest, out *UserProfile) error {
	return h.UserServiceHandler.GetUserByLogin(ctx, in, out)
}

func (h *userServiceHandler) GetUserByAccessToken(ctx context.Context, in *GetUserByAccessTokenRequest, out *UserProfile) error {
	return h.UserServiceHandler.GetUserByAccessToken(ctx, in, out)
}
