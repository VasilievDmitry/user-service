// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pkg "github.com/lotproject/user-service/pkg"

	testing "testing"
)

// UserServiceHandler is an autogenerated mock type for the UserServiceHandler type
type UserServiceHandler struct {
	mock.Mock
}

// ConfirmLogin provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) ConfirmLogin(_a0 context.Context, _a1 *pkg.ConfirmLoginRequest, _a2 *emptypb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.ConfirmLoginRequest, *emptypb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAuthToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) CreateAuthToken(_a0 context.Context, _a1 *pkg.CreateAuthTokenRequest, _a2 *pkg.ResponseWithAuthToken) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.CreateAuthTokenRequest, *pkg.ResponseWithAuthToken) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePasswordRecoveryCode provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) CreatePasswordRecoveryCode(_a0 context.Context, _a1 *pkg.CreatePasswordRecoveryCodeRequest, _a2 *pkg.CreatePasswordRecoveryCodeResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.CreatePasswordRecoveryCodeRequest, *pkg.CreatePasswordRecoveryCodeResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserByWallet provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) CreateUserByWallet(_a0 context.Context, _a1 *pkg.CreateUserByWalletRequest, _a2 *pkg.ResponseWithUserProfile) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.CreateUserByWalletRequest, *pkg.ResponseWithUserProfile) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeactivateAuthToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) DeactivateAuthToken(_a0 context.Context, _a1 *pkg.DeactivateAuthTokenRequest, _a2 *emptypb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.DeactivateAuthTokenRequest, *emptypb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByAccessToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) GetUserByAccessToken(_a0 context.Context, _a1 *pkg.GetUserByAccessTokenRequest, _a2 *pkg.ResponseWithUserProfile) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GetUserByAccessTokenRequest, *pkg.ResponseWithUserProfile) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserById provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) GetUserById(_a0 context.Context, _a1 *pkg.GetUserByIdRequest, _a2 *pkg.ResponseWithUserProfile) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GetUserByIdRequest, *pkg.ResponseWithUserProfile) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByLogin provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) GetUserByLogin(_a0 context.Context, _a1 *pkg.GetUserByLoginRequest, _a2 *pkg.ResponseWithUserProfile) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GetUserByLoginRequest, *pkg.ResponseWithUserProfile) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByWallet provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) GetUserByWallet(_a0 context.Context, _a1 *pkg.GetUserByWalletRequest, _a2 *pkg.ResponseWithUserProfile) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.GetUserByWalletRequest, *pkg.ResponseWithUserProfile) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) Ping(_a0 context.Context, _a1 *emptypb.Empty, _a2 *emptypb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, *emptypb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshAccessToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) RefreshAccessToken(_a0 context.Context, _a1 *pkg.RefreshAccessTokenRequest, _a2 *pkg.ResponseWithAuthToken) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.RefreshAccessTokenRequest, *pkg.ResponseWithAuthToken) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogin provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) SetLogin(_a0 context.Context, _a1 *pkg.SetLoginRequest, _a2 *pkg.SetLoginResponse) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.SetLoginRequest, *pkg.SetLoginResponse) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPassword provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) SetPassword(_a0 context.Context, _a1 *pkg.SetPasswordRequest, _a2 *emptypb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.SetPasswordRequest, *emptypb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUsername provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) SetUsername(_a0 context.Context, _a1 *pkg.SetUsernameRequest, _a2 *emptypb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.SetUsernameRequest, *emptypb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsePasswordRecoveryCode provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) UsePasswordRecoveryCode(_a0 context.Context, _a1 *pkg.UsePasswordRecoveryCodeRequest, _a2 *emptypb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.UsePasswordRecoveryCodeRequest, *emptypb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyPassword provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserServiceHandler) VerifyPassword(_a0 context.Context, _a1 *pkg.VerifyPasswordRequest, _a2 *emptypb.Empty) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.VerifyPasswordRequest, *emptypb.Empty) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserServiceHandler creates a new instance of UserServiceHandler. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceHandler(t testing.TB) *UserServiceHandler {
	mock := &UserServiceHandler{}
	mock.Mock.Test(t)

	return mock
}
