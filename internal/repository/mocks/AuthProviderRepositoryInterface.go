// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	user_service "github.com/lotproject/go-proto/go/user_service"
)

// AuthProviderRepositoryInterface is an autogenerated mock type for the AuthProviderRepositoryInterface type
type AuthProviderRepositoryInterface struct {
	mock.Mock
}

// GetByToken provides a mock function with given fields: ctx, provider, token
func (_m *AuthProviderRepositoryInterface) GetByToken(ctx context.Context, provider string, token string) (*user_service.AuthProvider, error) {
	ret := _m.Called(ctx, provider, token)

	var r0 *user_service.AuthProvider
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *user_service.AuthProvider); ok {
		r0 = rf(ctx, provider, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_service.AuthProvider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, provider, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, provider
func (_m *AuthProviderRepositoryInterface) Insert(ctx context.Context, provider *user_service.AuthProvider) error {
	ret := _m.Called(ctx, provider)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_service.AuthProvider) error); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, provider
func (_m *AuthProviderRepositoryInterface) Update(ctx context.Context, provider *user_service.AuthProvider) error {
	ret := _m.Called(ctx, provider)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user_service.AuthProvider) error); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
