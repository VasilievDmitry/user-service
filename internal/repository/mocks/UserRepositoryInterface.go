// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	pkg "github.com/lotproject/user-service/pkg"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UserRepositoryInterface) GetById(ctx context.Context, id string) (*pkg.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *pkg.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByLogin provides a mock function with given fields: ctx, login
func (_m *UserRepositoryInterface) GetByLogin(ctx context.Context, login string) (*pkg.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *pkg.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *pkg.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, user
func (_m *UserRepositoryInterface) Insert(ctx context.Context, user *pkg.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *UserRepositoryInterface) Update(_a0 context.Context, _a1 *pkg.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pkg.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
